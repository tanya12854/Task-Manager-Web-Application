mkdir task-manager
cd task-manager
npm init -y
npm install express bcrypt jsonwebtoken pg
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

// Routes
app.get('/', (req, res) => {
  res.send('Task Manager API');
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
const { Pool } = require('pg');

const pool = new Pool({
  user: 'your_postgres_user',
  host: 'localhost',
  database: 'task_manager',
  password: 'your_postgres_password',
  port: 5432,
});

module.exports = pool;
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const pool = require('./db');

// Helper function to hash passwords
const hashPassword = async (password) => {
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);
  return hashedPassword;
};

// Register a new user
const registerUser = async (username, password) => {
  const hashedPassword = await hashPassword(password);
  const query = 'INSERT INTO users (username, password) VALUES ($1, $2) RETURNING id';
  const values = [username, hashedPassword];

  try {
    const { rows } = await pool.query(query, values);
    const userId = rows[0].id;
    return userId;
  } catch (error) {
    throw new Error('Error registering user');
  }
};

// Authenticate a user
const authenticateUser = async (username, password) => {
  const query = 'SELECT id, password FROM users WHERE username = $1';
  const values = [username];

  try {
    const { rows } = await pool.query(query, values);
    if (rows.length === 0) {
      throw new Error('Invalid username or password');
    }

    const { id, password: hashedPassword } = rows[0];
    const isValidPassword = await bcrypt.compare(password, hashedPassword);

    if (!isValidPassword) {
      throw new Error('Invalid username or password');
    }

    const token = jwt.sign({ userId: id }, 'your_secret_key', { expiresIn: '1h' });
    return token;
  } catch (error) {
    throw new Error('Error authenticating user');
  }
};

module.exports = {
  registerUser,
  authenticateUser,
};
const express = require('express');
const router = express.Router();
const { registerUser, authenticateUser } = require('../auth');

// Register a new user
router.post('/register', async (req, res) => {
  const { username, password } = req.body;

  try {
    const userId = await registerUser(username, password);
    res.status(201).json({ message: 'User registered successfully', userId });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Authenticate a user
router.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    const token = await authenticateUser(username, password);
    res.status(200).json({ token });
  } catch (error) {
    res.status(401).json({ error: error.message });
  }
});

module.exports = router;
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
const userRoutes = require('./routes/users');

app.use(express.json());

// Routes
app.use('/users', userRoutes);

app.get('/', (req, res) => {
  res.send('Task Manager API');
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
-- Create the users table
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL
);

-- Create the tasks table
CREATE TABLE tasks (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  due_date DATE,
  completed BOOLEAN DEFAULT FALSE
);
const express = require('express');
const router = express.Router();
const pool = require('../db');

// Get all tasks for a user
router.get('/', async (req, res) => {
  const userId = req.user.userId; // Assuming authenticated user's ID is available in req.user.userId

  try {
    const query = 'SELECT * FROM tasks WHERE user_id = $1';
    const values = [userId];
    const { rows } = await pool.query(query, values);
    res.json(rows);
  } catch (error) {
    res.status(500).json({ error: 'Error fetching tasks' });
  }
});

// Create a new task
router.post('/', async (req, res) => {
  const userId = req.user.userId; // Assuming authenticated user's ID is available in req.user.userId
  const { title, description, due_date } = req.body;

  try {
    const query = 'INSERT INTO tasks (user_id, title, description, due_date) VALUES ($1, $2, $3, $4) RETURNING *';
    const values = [userId, title, description, due_date];
    const { rows } = await pool.query(query, values);
    res.status(201).json(rows[0]);
  } catch (error) {
    res.status(500).json({ error: 'Error creating task' });
  }
});

// Update a task
router.put('/:id', async (req, res) => {
  const taskId = req.params.id;
  const userId = req.user.userId; // Assuming authenticated user's ID is available in req.user.userId
  const { title, description, due_date, completed } = req.body;

  try {
    const query = 'UPDATE tasks SET title = $1, description = $2, due_date = $3, completed = $4 WHERE id = $5 AND user_id = $6 RETURNING *';
    const values = [title, description, due_date, completed, taskId, userId];
    const { rows } = await pool.query(query, values);

    if (rows.length === 0) {
      return res.status(404).json({ error: 'Task not found' });
    }

    res.json(rows[0]);
  } catch (error) {
    res.status(500).json({ error: 'Error updating task' });
  }
});

// Delete a task
router.delete('/:id', async (req, res) => {
  const taskId = req.params.id;
  const userId = req.user.userId; // Assuming authenticated user's ID is available in req.user.userId

  try {
    const query = 'DELETE FROM tasks WHERE id = $1 AND user_id = $2 RETURNING *';
    const values = [taskId, userId];
    const { rows } = await pool.query(query, values);

    if (rows.length === 0) {
      return res.status(404).json({ error: 'Task not found' });
    }

    res.json({ message: 'Task deleted successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Error deleting task' });
  }
});

module.exports = router;
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
const userRoutes = require('./routes/users');
const taskRoutes = require('./routes/tasks');

app.use(express.json());

// Routes
app.use('/users', userRoutes);
app.use('/tasks', taskRoutes); // Add this line

app.get('/', (req, res) => {
  res.send('Task Manager API');
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
const jwt = require('jsonwebtoken');

const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Missing authorization token' });
  }

  try {
    const decoded = jwt.verify(token, 'your_secret_key');
    req.user = { userId: decoded.userId };
    next();
  } catch (error) {
    res.status(403).json({ error: 'Invalid or expired token' });
  }
};

module.exports = authMiddleware;
const express = require('express');
const router = express.Router();
const pool = require('../db');
const authMiddleware = require('../middleware/auth');

// Apply the authMiddleware to all routes
router.use(authMiddleware);

// ... (existing task routes) ...

module.exports = router;
const errorHandler = (err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong' });
};

module.exports = errorHandler;
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
const userRoutes = require('./routes/users');
const taskRoutes = require('./routes/tasks');
const errorHandler = require('./middleware/errorHandler');

app.use(express.json());

// Routes
app.use('/users', userRoutes);
app.use('/tasks', taskRoutes);

app.get('/', (req, res) => {
  res.send('Task Manager API');
});

// Error handling middleware
app.use(errorHandler);

app.listen(port, () =>
